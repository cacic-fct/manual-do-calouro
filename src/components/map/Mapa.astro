<style lang="postcss">
@import "ol/ol.css";

.map-container {
    width: 100%;
    height: 80vh;
    padding-top: 20px;
    padding-bottom: 20px;
}

.popup {
    border-radius: 5px;
    border: 1px solid #808080;
    background-color: #ffffffee;
    padding: 2px;
    display: block;
    color: #000;
    max-width: 200px;
    min-height: 50px;
    padding: 10px 15px;

    line-height: 1;

    span {
      font-weight: 700;
    }

 
}

</style>

<div class="map-container">
  <div id="ol-map-manual" style="width: 100%; height: 100%">
    <div id="popup" class="popup" [hidden]="true"></div>
  </div>
</div>

<script>
  import OLMap from "ol/Map";
  import View from "ol/View";
  import OSM from "ol/source/OSM";
  import { useGeographic } from "ol/proj";
  import VectorSource from "ol/source/Vector";
  import Overlay from "ol/Overlay";
  import GeoJSON from "ol/format/GeoJSON";
  import { Tile as TileLayer, Vector as VectorLayer } from "ol/layer";
  import { Icon, Stroke, Style } from "ol/style";
  import { FullScreen, defaults as defaultControls } from "ol/control.js";

  useGeographic();
  const rasterLayer = new TileLayer({
    source: new OSM(),
  });

  const map = new OLMap({
    controls: defaultControls().extend([new FullScreen()]),
    view: new View({
      center: [-51.40775, -22.12103],
      zoom: 15,
      maxZoom: 19,
      projection: "EPSG:3857",
    }),
    layers: [rasterLayer],
    target: "ol-map-manual",
  });

  makeGroceriesMarkers(map);

  function makeGroceriesMarkers(map: OLMap): void {
    const layers: string[] = ["mercados", "compras", "hospitais", "farmacias", "autoridades"];

    const mercadosIcon = new Style({
      image: new Icon({
        anchor: [0.5, 1],
        scale: 0.5,
        anchorXUnits: "fraction",
        anchorYUnits: "fraction",
        src: "https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-2x-blue.png",
      }),
      stroke: new Stroke({
        color: "#3274A3",
        width: 7,
      }),
    });

    const comprasIcon = new Style({
      image: new Icon({
        anchor: [0.5, 1],
        scale: 0.5,
        anchorXUnits: "fraction",
        anchorYUnits: "fraction",
        src: "https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-2x-gold.png",
      }),
      stroke: new Stroke({
        color: "#C1A32D",
        width: 7,
      }),
    });

    const hospitaisIcon = new Style({
      image: new Icon({
        anchor: [0.5, 1],
        scale: 0.5,
        anchorXUnits: "fraction",
        anchorYUnits: "fraction",
        src: "https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-2x-red.png",
      }),
      stroke: new Stroke({
        color: "#982E40",
        width: 7,
      }),
    });

    const farmaciasIcon = new Style({
      image: new Icon({
        anchor: [0.5, 1],
        scale: 0.5,
        anchorXUnits: "fraction",
        anchorYUnits: "fraction",
        src: "https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-2x-orange.png",
      }),
      stroke: new Stroke({
        color: "#98652E",
        width: 7,
      }),
    });

    const autoridadesIcon = new Style({
      image: new Icon({
        anchor: [0.5, 1],
        scale: 0.5,
        anchorXUnits: "fraction",
        anchorYUnits: "fraction",
        src: "https://cdn.jsdelivr.net/gh/pointhi/leaflet-color-markers@master/img/marker-icon-2x-grey.png",
      }),
      stroke: new Stroke({
        color: "#6B6B6B",
        width: 7,
      }),
    });

    // For each layer create a geojson layer with markers and polygons.
    // Mercados style is mercadosIcon and mercadosStyle.
    // Compras style is comprasIcon and comprasStyle.
    // bindPopup of markers and polygons to "<b>feature.properties.name</b><br>feature.properties.description"
    layers.forEach((layer) => {
      const vectorSource = new VectorSource({
        url: `https://cdn.jsdelivr.net/gh/cacic-fct/manual-do-calouro@main/map/${layer}.geojson`,
        format: new GeoJSON(),
      });

      const vectorLayer = new VectorLayer({
        source: vectorSource,
        // @ts-ignore
        style: (): any => {
          switch (layer) {
            case "mercados":
              return mercadosIcon;
            case "compras":
              return comprasIcon;
            case "hospitais":
              return hospitaisIcon;
            case "farmacias":
              return farmaciasIcon;
            case "autoridades":
              return autoridadesIcon;
            default:
              return null;
          }
        },
      });

      const popup = document.getElementById("popup");

      if (!popup) {
        return;
      }

      const popupOverlay = new Overlay({
        element: popup || undefined,
        /*autoPan: true,
        autoPanAnimation: {
          duration: 250,
        },*/
      });

      map.addOverlay(popupOverlay);

      map.on("singleclick", (event) => {
        map.forEachFeatureAtPixel(
          event.pixel,
          (feature) => {
            popup.innerHTML = `<span>${feature.get("name")}</span><br>${feature.get("description") || ""}`;
            popup.hidden = false;

            feature.get("maps")
              ? `<br><a href="https://goo.gl/maps/${feature.get("maps")}" target="_blank">Mais informações</a>`
              : "";

            popupOverlay.setPosition(event.coordinate);
          },
          { hitTolerance: 6 }
        );
      });

      map.on("movestart", () => {
        popup.hidden = true;
      });

      map.on("pointermove", function (e) {
        const pixel = map.getEventPixel(e.originalEvent);
        const hit = map.hasFeatureAtPixel(pixel);
        const target: any = map.getTarget();
        const element = document.getElementById(target);

        if (element) {
          element.style.cursor = hit ? "pointer" : "";
        }
      });

      map.addLayer(vectorLayer);
    });
  }
</script>
